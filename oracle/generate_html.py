# generate_html.py (cleaned up for web publishing)

import os
from html import escape
from datetime import datetime

# Directories
base_dir = os.path.join(os.path.dirname(__file__), "..", "data")
output_dir = os.path.join(os.path.dirname(__file__), "..", "web")
archive_dir = os.path.join(os.path.dirname(__file__), "..", "archive")

os.makedirs(output_dir, exist_ok=True)

# CSS styling
STYLE_PATH = os.path.join(output_dir, "style.css")
with open(STYLE_PATH, "w", encoding="utf-8") as f:
    f.write("""
body {
  font-family: "Courier New", Courier, monospace;
  max-width: 800px;
  margin: 2em auto;
  padding: 1em;
  background: #eee;
  color: #222;
  line-height: 1.6;
}
header, footer {
  text-align: center;
  margin-bottom: 2em;
}
h1 {
  font-size: 2em;
  margin-bottom: 0.2em;
}
.date {
  font-size: 0.9em;
  color: #666;
}
pre {
  background: #fff;
  padding: 0.5em;
  overflow-x: auto;
  white-space: pre-wrap;
}
.gematria {
  color: #800080;
  text-align: center;
  font-size: 1.3em;
  margin: 2em 0 1em;
}
.gem-line {
  background: #f9f6ff;
  border-left: 4px solid #a55eea;
  padding: 0.4em 1em;
  font-family: monospace;
  white-space: pre-wrap;
  margin: 0.5em 0;
}
.divider {
  border-top: 1px dashed #aaa;
  margin: 2em 0;
}
.page-box {
  background: #fff;
  padding: 1em;
  box-shadow: 0 0 10px rgba(0,0,0,0.05);
  border-radius: 6px;
}
.logo {
  width: 128px;
  height: 128px;
  object-fit: cover;
  border-radius: 4px;
  display: block;
  margin: 0 auto 1em;
}
nav ul {
  list-style: none;
  padding: 0;
}
nav li {
  margin: 0.3em 0;
}
""")

PAGE_TEMPLATE = """
<!DOCTYPE html>
<html lang=\"en\">
<head>
  <meta charset=\"UTF-8\">
  <title>{title}</title>
  <link rel=\"stylesheet\" href=\"style.css\">
</head>
<body>
  <header>
    <img src="logo.png" alt="FUCKUP¬≤ Logo" class="logo" />
    <h1>FUCKUP¬≤ Oracle Archive</h1>
    <p class=\"date\">{date}</p>
  </header>
<main>
  <div class="page-box">
    {content}
    <p><a href="index.html">&larr; Back to archive</a></p>
  </div>
</main>
  <footer>
    <p>Generated by the FUCKUP¬≤ divinatory engine.</p>
  </footer>
</body>
</html>
"""

def render_gematria_section(text):
    lines = text.splitlines()
    in_block = False
    rendered = []
    for line in lines:
        if "‚ú° GEMATRIA SYNCHRONICITY ‚ú°" in line:
            in_block = True
            rendered.append("<h2 class='gematria'>‚ú° Gematria Synchronicity ‚ú°</h2>")
            continue
        if in_block:
            if line.strip().startswith("==") or line.strip() == "":
                in_block = False
                rendered.append("<hr class='divider'>")
            else:
                rendered.append(f"<pre class='gem-line'>{escape(line)}</pre>")
        else:
            rendered.append(f"<pre>{escape(line)}</pre>")
    return "\n".join(rendered)

def create_page(filename):
    archive_path = os.path.join(archive_dir, filename)

    with open(archive_path, "r", encoding="utf-8") as src:
        content = src.read()

    html_content = render_gematria_section(content)

    # Extract date string from filename
    title = filename.replace(".txt", "")
    for fmt in ("%Y-%m-%d-%H%M%S", "%Y-%m-%d_%H%M%S", "%Y-%m-%d"):
        try:
            date_obj = datetime.strptime(title, fmt)
            break
        except ValueError:
            continue
    else:
        raise ValueError(f"Could not parse date from filename: {title}")

    date_str = date_obj.strftime("%Y-%m-%d")

    # Extract hexagram info
    hexagram_line = next((line for line in content.splitlines() if line.strip().startswith("Today's Hexagram #")), "Hexagram")
    hexagram_info = hexagram_line.replace("Today's Hexagram #", "").strip()
    hexagram_info = hexagram_info.replace(":", "").replace(" ", "-")  # safe for filenames

    output_filename = f"{date_str}-Hexagram-{hexagram_info}.html"
    output_path = os.path.join(output_dir, output_filename)

    # Reformat display date for the HTML content
    try:
        display_date = date_obj.strftime("%B %d, %Y ‚Äî %H:%M")
    except:
        display_date = title

    page_html = PAGE_TEMPLATE.format(title="FUCKUP¬≤ Prophecy", date=display_date, content=html_content)

    with open(output_path, "w", encoding="utf-8") as f:
        f.write(page_html)

    print(f"‚úÖ Generated page: {output_filename}")
    return output_filename

def create_index(pages):
    index_path = os.path.join(output_dir, "index.html")
    with open(index_path, "w", encoding="utf-8") as f:
        f.write("""
<!DOCTYPE html>
<html lang=\"en\">
<head>
  <meta charset=\"UTF-8\">
  <title>FUCKUP¬≤ Archive Index</title>
  <link rel=\"stylesheet\" href=\"style.css\">
</head>
<body>
  <header>
    <img src="logo.png" alt="FUCKUP¬≤ Logo" class="logo" />
    <h1>FUCKUP¬≤ Oracle Archive</h1>
    <p class=\"date\">All available prophecies</p>
  </header>
  <nav>
    <ul>
""")
        for page in sorted(pages, reverse=True):

            base = page.replace(".html", "")
            short_slug = base.split("-", 4)[-1][:32] + "‚Ä¶" if "-" in base else ""
            f.write(f"      <li><a href=\"{page}\">{base[:19]} ‚Äî {short_slug}</a></li>\n")
       
        f.write("""
    </ul>
  </nav>
  <footer>
    <p>Powered by FUCKUP¬≤.</p>
  </footer>
</body>
</html>
""")
    print(f"‚úÖ Index page generated at {index_path}")

def main():
    print("üåê Generating HTML archive...")
    pages = []
    for filename in os.listdir(archive_dir):
        if filename.endswith(".txt"):
            html_file = create_page(filename)
            pages.append(html_file)
    create_index(pages)
    print("‚ú® Web archive ready in /web")

if __name__ == "__main__":
    main()
